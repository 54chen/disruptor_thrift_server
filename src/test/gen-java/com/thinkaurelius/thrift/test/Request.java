/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thinkaurelius.thrift.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.nio.ByteBuffer;

public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ARG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("argType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public int id; // required
  public ByteBuffer arg1; // required
  public ByteBuffer arg2; // required
  /**
   * 
   * @see ArgType
   */
  public ArgType argType; // required
  /**
   * 
   * @see OperationType
   */
  public OperationType operationType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ARG1((short)2, "arg1"),
    ARG2((short)3, "arg2"),
    /**
     * 
     * @see ArgType
     */
    ARG_TYPE((short)4, "argType"),
    /**
     * 
     * @see OperationType
     */
    OPERATION_TYPE((short)5, "operationType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ARG1
          return ARG1;
        case 3: // ARG2
          return ARG2;
        case 4: // ARG_TYPE
          return ARG_TYPE;
        case 5: // OPERATION_TYPE
          return OPERATION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ARG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("argType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ArgType.class)));
    tmpMap.put(_Fields.OPERATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operationType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OperationType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    int id,
    ByteBuffer arg1,
    ByteBuffer arg2,
    ArgType argType,
    OperationType operationType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.arg1 = arg1;
    this.arg2 = arg2;
    this.argType = argType;
    this.operationType = operationType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetArg1()) {
      this.arg1 = org.apache.thrift.TBaseHelper.copyBinary(other.arg1);
;
    }
    if (other.isSetArg2()) {
      this.arg2 = org.apache.thrift.TBaseHelper.copyBinary(other.arg2);
;
    }
    if (other.isSetArgType()) {
      this.argType = other.argType;
    }
    if (other.isSetOperationType()) {
      this.operationType = other.operationType;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.arg1 = null;
    this.arg2 = null;
    this.argType = null;
    this.operationType = null;
  }

  public int getId() {
    return this.id;
  }

  public Request setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte[] getArg1() {
    setArg1(org.apache.thrift.TBaseHelper.rightSize(arg1));
    return arg1 == null ? null : arg1.array();
  }

  public ByteBuffer bufferForArg1() {
    return arg1;
  }

  public Request setArg1(byte[] arg1) {
    setArg1(arg1 == null ? (ByteBuffer)null : ByteBuffer.wrap(arg1));
    return this;
  }

  public Request setArg1(ByteBuffer arg1) {
    this.arg1 = arg1;
    return this;
  }

  public void unsetArg1() {
    this.arg1 = null;
  }

  /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
  public boolean isSetArg1() {
    return this.arg1 != null;
  }

  public void setArg1IsSet(boolean value) {
    if (!value) {
      this.arg1 = null;
    }
  }

  public byte[] getArg2() {
    setArg2(org.apache.thrift.TBaseHelper.rightSize(arg2));
    return arg2 == null ? null : arg2.array();
  }

  public ByteBuffer bufferForArg2() {
    return arg2;
  }

  public Request setArg2(byte[] arg2) {
    setArg2(arg2 == null ? (ByteBuffer)null : ByteBuffer.wrap(arg2));
    return this;
  }

  public Request setArg2(ByteBuffer arg2) {
    this.arg2 = arg2;
    return this;
  }

  public void unsetArg2() {
    this.arg2 = null;
  }

  /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
  public boolean isSetArg2() {
    return this.arg2 != null;
  }

  public void setArg2IsSet(boolean value) {
    if (!value) {
      this.arg2 = null;
    }
  }

  /**
   * 
   * @see ArgType
   */
  public ArgType getArgType() {
    return this.argType;
  }

  /**
   * 
   * @see ArgType
   */
  public Request setArgType(ArgType argType) {
    this.argType = argType;
    return this;
  }

  public void unsetArgType() {
    this.argType = null;
  }

  /** Returns true if field argType is set (has been assigned a value) and false otherwise */
  public boolean isSetArgType() {
    return this.argType != null;
  }

  public void setArgTypeIsSet(boolean value) {
    if (!value) {
      this.argType = null;
    }
  }

  /**
   * 
   * @see OperationType
   */
  public OperationType getOperationType() {
    return this.operationType;
  }

  /**
   * 
   * @see OperationType
   */
  public Request setOperationType(OperationType operationType) {
    this.operationType = operationType;
    return this;
  }

  public void unsetOperationType() {
    this.operationType = null;
  }

  /** Returns true if field operationType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationType() {
    return this.operationType != null;
  }

  public void setOperationTypeIsSet(boolean value) {
    if (!value) {
      this.operationType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ARG1:
      if (value == null) {
        unsetArg1();
      } else {
        setArg1((ByteBuffer)value);
      }
      break;

    case ARG2:
      if (value == null) {
        unsetArg2();
      } else {
        setArg2((ByteBuffer)value);
      }
      break;

    case ARG_TYPE:
      if (value == null) {
        unsetArgType();
      } else {
        setArgType((ArgType)value);
      }
      break;

    case OPERATION_TYPE:
      if (value == null) {
        unsetOperationType();
      } else {
        setOperationType((OperationType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case ARG1:
      return getArg1();

    case ARG2:
      return getArg2();

    case ARG_TYPE:
      return getArgType();

    case OPERATION_TYPE:
      return getOperationType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ARG1:
      return isSetArg1();
    case ARG2:
      return isSetArg2();
    case ARG_TYPE:
      return isSetArgType();
    case OPERATION_TYPE:
      return isSetOperationType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_arg1 = true && this.isSetArg1();
    boolean that_present_arg1 = true && that.isSetArg1();
    if (this_present_arg1 || that_present_arg1) {
      if (!(this_present_arg1 && that_present_arg1))
        return false;
      if (!this.arg1.equals(that.arg1))
        return false;
    }

    boolean this_present_arg2 = true && this.isSetArg2();
    boolean that_present_arg2 = true && that.isSetArg2();
    if (this_present_arg2 || that_present_arg2) {
      if (!(this_present_arg2 && that_present_arg2))
        return false;
      if (!this.arg2.equals(that.arg2))
        return false;
    }

    boolean this_present_argType = true && this.isSetArgType();
    boolean that_present_argType = true && that.isSetArgType();
    if (this_present_argType || that_present_argType) {
      if (!(this_present_argType && that_present_argType))
        return false;
      if (!this.argType.equals(that.argType))
        return false;
    }

    boolean this_present_operationType = true && this.isSetOperationType();
    boolean that_present_operationType = true && that.isSetOperationType();
    if (this_present_operationType || that_present_operationType) {
      if (!(this_present_operationType && that_present_operationType))
        return false;
      if (!this.operationType.equals(that.operationType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Request typedOther = (Request)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg1()).compareTo(typedOther.isSetArg1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, typedOther.arg1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg2()).compareTo(typedOther.isSetArg2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, typedOther.arg2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgType()).compareTo(typedOther.isSetArgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argType, typedOther.argType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationType()).compareTo(typedOther.isSetOperationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationType, typedOther.operationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg1:");
    if (this.arg1 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.arg1, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg2:");
    if (this.arg2 == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.arg2, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argType:");
    if (this.argType == null) {
      sb.append("null");
    } else {
      sb.append(this.argType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationType:");
    if (this.operationType == null) {
      sb.append("null");
    } else {
      sb.append(this.operationType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (arg1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arg1' was not present! Struct: " + toString());
    }
    if (arg2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arg2' was not present! Struct: " + toString());
    }
    if (argType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argType' was not present! Struct: " + toString());
    }
    if (operationType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operationType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arg1 = iprot.readBinary();
              struct.setArg1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARG2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arg2 = iprot.readBinary();
              struct.setArg2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.argType = ArgType.findByValue(iprot.readI32());
              struct.setArgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationType = OperationType.findByValue(iprot.readI32());
              struct.setOperationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.arg1 != null) {
        oprot.writeFieldBegin(ARG1_FIELD_DESC);
        oprot.writeBinary(struct.arg1);
        oprot.writeFieldEnd();
      }
      if (struct.arg2 != null) {
        oprot.writeFieldBegin(ARG2_FIELD_DESC);
        oprot.writeBinary(struct.arg2);
        oprot.writeFieldEnd();
      }
      if (struct.argType != null) {
        oprot.writeFieldBegin(ARG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.argType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.operationType != null) {
        oprot.writeFieldBegin(OPERATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.operationType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeBinary(struct.arg1);
      oprot.writeBinary(struct.arg2);
      oprot.writeI32(struct.argType.getValue());
      oprot.writeI32(struct.operationType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.arg1 = iprot.readBinary();
      struct.setArg1IsSet(true);
      struct.arg2 = iprot.readBinary();
      struct.setArg2IsSet(true);
      struct.argType = ArgType.findByValue(iprot.readI32());
      struct.setArgTypeIsSet(true);
      struct.operationType = OperationType.findByValue(iprot.readI32());
      struct.setOperationTypeIsSet(true);
    }
  }

}

